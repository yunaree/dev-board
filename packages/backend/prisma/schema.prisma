// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  password      String?
  email         String?  @unique
  provider      String   @default("local")
  providerId    String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tasks         Task[]  @relation("UserTasks")
  dashboards    Dashboard[] @relation("CreatedDashboards")
  dashboardMemberships  DashboardMember[]
  refreshToken  String?
  avatar String?
  
  @@unique([provider, providerId])
}

enum Status {
  active
  in_progress
  inactive
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(500)
  description String?  @db.VarChar(500)
  status      Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int?  
  dashboardId Int?
  filePath  String?

  user        User?    @relation("UserTasks", fields: [createdBy], references: [id])
  dashboard Dashboard? @relation(fields: [dashboardId], references: [id])

}

model Dashboard {
  id       Int     @id @default(autoincrement())
  title    String  @db.VarChar(255)
  userId   Int

  creator  User    @relation("CreatedDashboards", fields: [userId], references: [id])
  tasks    Task[]
  members  DashboardMember[]
}

model DashboardMember {
  id           Int       @id @default(autoincrement())
  userId       Int
  dashboardId  Int

  user         User      @relation(fields: [userId], references: [id])
  dashboard    Dashboard @relation(fields: [dashboardId], references: [id])

  @@unique([userId, dashboardId]) // один користувач не може бути двічі в одній дошці
}


